const User = require("../models/User")
const Role = require("../models/Role"); // ‚úÖ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É


// Create User

exports.createUser = async (req, res) => {
    try {
        const { name, email, password, roleId } = req.body;

        // –ï—Å–ª–∏ roleId –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞—Ö–æ–¥–∏–º ID —Ä–æ–ª–∏ "user"
        let assignedRoleId = roleId;
        if (!roleId) {
            const userRole = await Role.findOne({ name: "user" });
            if (!userRole) {
                return res.status(500).json({ message: "‚ùå –†–æ–ª—å 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö." });
            }
            assignedRoleId = userRole._id;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
        const role = await Role.findById(assignedRoleId);
        if (!role) {
            return res.status(404).json({ message: "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({ name, email, password, roleId: assignedRoleId });
        await newUser.save();

        res.status(201).json({ message: "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", user: newUser });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};



// Obtain all users
// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏

exports.getUsers = async (req, res) => {
    try {
        const users = await User.find().populate("roleId", "name description");
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};


// User authentication
exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if (user.password !== password) {
            return res.status(401).json({ message: "Invalid password" });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};