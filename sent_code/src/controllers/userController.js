// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const bcrypt = require("bcrypt");
const User = require("../models/User");
const Role = require("../models/Role");
const Log = require("../models/Log");

exports.createUser = async (req, res) => {
    try {
        const { name, email, password, roleId } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
        }

        let assignedRoleId = roleId;
        if (!roleId) {
            const userRole = await Role.findOne({ name: "user" });
            if (!userRole) {
                return res.status(500).json({ message: "‚ùå –†–æ–ª—å 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
            }
            assignedRoleId = userRole._id;
        }

        // ‚ùóÔ∏è –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å
        const newUser = new User({
            name,
            email,
            password, // ‚ùóÔ∏è –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ UserSchema.pre("save")
            roleId: assignedRoleId
        });

        await newUser.save();

        res.status(201).json({ message: "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", user: newUser });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ error: error.message });
    }
};



// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏
exports.getUsers = async (req, res) => {
    try {
        const users = await User.find().populate("roleId", "name description");

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await Log.create({
            action: "GET_USERS",
            endpoint: req.originalUrl,
            method: req.method,
            user: "Admin",
            requestData: {},
            responseData: users,
            statusCode: 200
        });

        res.status(200).json(users);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        await Log.create({
            action: "GET_USERS_ERROR",
            endpoint: req.originalUrl,
            method: req.method,
            user: "Admin",
            requestData: {},
            responseData: { error: error.message },
            statusCode: 500
        });

        res.status(500).json({ error: error.message });
    }
};
exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        // üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }

        // üîí –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            return res.status(401).json({ message: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });
        }

        res.status(200).json({ message: "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥.", user });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
        res.status(500).json({ message: error.message });
    }
};

