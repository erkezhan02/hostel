const Role = require("../models/Role");



// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏
exports.getRoles = async (req, res) => {
    try {
        const roles = await Role.find();
        res.status(200).json(roles);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};


// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
exports.createRole = async (req, res) => {
    try {
        const { name, description } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
        const existingRole = await Role.findOne({ name });
        if (existingRole) {
            return res.status(400).json({ message: "‚ùå –†–æ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
        const newRole = new Role({ name, description });
        await newRole.save();

        res.status(201).json({ message: "‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", role: newRole });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// üìå –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ roleId
// üìå –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å –ø–æ _id
exports.updateRole = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        if (name) {
            const existingRole = await Role.findOne({ name });
            if (existingRole && existingRole._id.toString() !== id) {
                return res.status(400).json({ message: "‚ùå –†–æ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
            }
        }

        const updatedRole = await Role.findByIdAndUpdate(
            id,
            { name, description },
            { new: true, runValidators: true }
        );

        if (!updatedRole) {
            return res.status(404).json({ message: "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        }

        res.status(200).json({ message: "‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", role: updatedRole });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// üìå –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ roleId
// üìå –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ _id
exports.deleteRole = async (req, res) => {
    try {
        const { id } = req.params;

        const deletedRole = await Role.findByIdAndDelete(id);

        if (!deletedRole) {
            return res.status(404).json({ message: "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        }

        res.status(200).json({ message: "üóëÔ∏è –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", role: deletedRole });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

