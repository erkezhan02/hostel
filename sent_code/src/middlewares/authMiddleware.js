const jwt = require("jsonwebtoken");
const User = require("../models/User");

exports.verifyToken = async (req, res, next) => {
    const token = req.headers["authorization"]?.split(" ")[1];

    if (!token) {
        return res.status(401).json({ message: "üö´ –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω." });
    }

    jwt.verify(token, process.env.JWT_SECRET || "secretKey", async (err, decoded) => {
        if (err) {
            return res.status(403).json({ message: "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω." });
        }

        const userEmail = decoded.email;

        if (!userEmail) {
            return res.status(400).json({ message: "‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ." });
        }

        try {
            const user = await User.findOne({ email: userEmail });

            if (!user) {
                return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ req.user
            req.user = user;
            next();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
        }
    });
};
